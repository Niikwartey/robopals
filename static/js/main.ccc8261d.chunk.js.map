{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/CardList.js","actions.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["ROBOTS_URL","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","UPDATE_SEARCH_TERM","initialState","searchTerm","robots","Card","_ref","id","name","username","email","react_default","a","createElement","className","alt","src","concat","CardList","map","user","i","components_Card","key","requestRobots","dispatch","type","fetch","then","res","json","payload","catch","error","connect","state","value","searchRobots","SearchTerm","handleSubmitSearch","event","action","target","placeholder","onChange","Scroll","children","style","overflow","height","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","err","info","setState","console","log","Component","handleRequestRobots","useEffect","filteredRobots","filter","robot","toLowerCase","includes","length","Fragment","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","arguments","undefined","objectSpread","isPending","logger","createLogger","STORE","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","es","store","containers_App","document","getElementById","URL","process","href","origin","addEventListener","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ccc8261d.chunk.js","sourcesContent":["export const ROBOTS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n\nexport const UPDATE_SEARCH_TERM = 'UPDATE_SEARCH_TERM';\n","import { \n  UPDATE_SEARCH_TERM,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialState = {\n  searchTerm: '',\n  robots: [],\n}\n\nexport function requestRobots(state=initialState, action) {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING: \n      return {...state, isPending: true};\n    case REQUEST_ROBOTS_SUCCESS: \n      return {...state, robots: action.payload, isPending: false};\n    case REQUEST_ROBOTS_FAILED: \n      return {...state, error: action.payload, isPending: false};\n    default:\n      return state;\n  }\n}\nexport function searchRobots(state=initialState, action) {\n  switch(action.type) {\n    case UPDATE_SEARCH_TERM:\n      console.log(\"in searchRobots reducer\")\n      return {...state, searchTerm: action.payload};\n    default:\n      return state;\n  }\n}","import React from 'react';\n\nconst Card = ({id, name, username, email}) => {\n   return (\n     <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n       <img alt={name} src={`https://robohash.org/${id}?size=200x200`} />\n       <div>\n         <h1>{username}</h1>\n         <p>{email}</p>\n       </div>\n     </div>\n   );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              username={robots[i].username}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import { \n  UPDATE_SEARCH_TERM,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n  ROBOTS_URL\n} from './constants';\n\nexport function requestRobots(dispatch) {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n\n  fetch(ROBOTS_URL)\n    .then(res => res.json())\n    .then(robots => dispatch({\n      type: REQUEST_ROBOTS_SUCCESS, \n      payload: robots\n    }))\n    .catch(error => dispatch({\n      type: REQUEST_ROBOTS_FAILED, \n      payload: error\n    }))\n}\n\nexport function updateSearchTerm(searchTerm) {\n  return {\n    type: UPDATE_SEARCH_TERM,\n    payload: searchTerm,\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateSearchTerm } from '../actions';\n\nconst SearchBox = ({ handleSubmitSearch }) => {\n  return (\n     <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search for any one'\n        onChange={handleSubmitSearch}\n      />\n     </div>\n  );\n};\n\nconst mapDispatchTopProps = (dispatch) => {\n  return {\n    handleSubmitSearch: (event) => {\n      let action = updateSearchTerm(event.target.value);\n      dispatch(action);\n    }\n  }\n}\nconst mapStateToProps = (state) => {\n  return { value : state.searchRobots.SearchTerm };\n}\n\nexport default connect(mapStateToProps, mapDispatchTopProps)(SearchBox);","import React from 'react';\n\nconst Scroll = ({children}) => {\n   return (\n     <div style={{overflow: 'scroll', height: '800px'}}>\n       {children}\n     </div>\n   );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(err, info) {\n    this.setState({ hasError: true });\n    console.log(err, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Sheesh somn went wrong dog</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React, { useEffect }  from 'react';\nimport { connect } from \"react-redux\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { requestRobots } from '../actions';\n\nfunction App(props) {\n  const { \n    robots,\n    handleRequestRobots,\n    searchTerm,\n  } = props;\n\n  useEffect(handleRequestRobots, []);\n  \n  const filteredRobots = robots.filter(robot => {\n    return robot.username.toLowerCase().includes(searchTerm.toLowerCase());\n  })\n\n  return (\n    <div className='tc'>\n      <h1 className='f1'>RoboPals</h1>\n      {\n        robots.length === 0 ? \n          <h2>loading...</h2> : (\n          <>\n            <SearchBox />\n            <Scroll>\n              <ErrorBoundary>\n                <CardList robots={filteredRobots} />\n              </ErrorBoundary>\n            </Scroll>\n          </>\n        )\n      }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    robots: state.requestRobots.robots,\n    searchTerm: state.searchRobots.searchTerm,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleRequestRobots: () => {\n      dispatch(requestRobots);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { requestRobots, searchRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({requestRobots, searchRobots});\nconst logger = createLogger();\nconst STORE = createStore(\n  rootReducer, \n  applyMiddleware(thunk, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={STORE} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}